/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–∞
 * @class FileCard
 */

import { CONFIG, getFileIcon, formatFileSize } from '../config.js';
import { getFileContent } from '../utils/api.js';
import { showNotification } from '../utils/animations.js';

class FileCard {
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
     * @param {string} config.fileId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
     * @param {string} config.fileName - –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
     * @param {string} config.fileSize - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     * @param {string} config.originalName - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
     * @param {Function} config.onRename - –ö–æ–ª–±—ç–∫ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
     * @param {Function} config.onRemove - –ö–æ–ª–±—ç–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     */
    constructor({ fileId, fileName, originalName, fileSize, onRename, onRemove }) {
        this.fileId = fileId;
        this.fileName = fileName;
        this.originalFileName = fileName;
        this.originalName = originalName;
        this.fileSize = fileSize;
        this.onRename = onRename;
        this.onRemove = onRemove;
        this.editInput = null;
        this.previewContent = '';
        this.isEditing = false;
        this.isPreviewExpanded = false;
        this.isLoadingPreview = false;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∞–π–ª–∞
     * @returns {HTMLElement} DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    render() {
        const card = document.createElement('div');
        card.className = 'file-card smooth-transition cursor-move';
        card.dataset.fileId = this.fileId;

        const displayName = this.truncateFilename(this.fileName, this.computeMaxChars());
        const displayOriginal = this.truncateFilename(this.originalName, 12);
        const icon = getFileIcon(this.fileName);

        card.innerHTML = `
            <div class="d-flex align-items-start justify-content-between w-100">
                <div class="d-flex align-items-start flex-grow-1 gap-3">
                    <!-- –ò–∫–æ–Ω–∫–∞ -->
                    <div class="flex-shrink-0">
                        <div class="file-icon fs-2">${icon}</div>
                    </div>

                    <!-- –ò–Ω—Ñ–æ -->
                    <div class="file-info flex-grow-1">
                        <div class="file-name fw-bold mb-1" title="${this.fileName}">${displayName}</div>
                        <div class="file-details d-flex gap-2 mb-2">
                            <span class="badge bg-primary bg-opacity-25 text-primary" title="${this.originalName}">${displayOriginal}</span>
                            <span class="badge bg-secondary bg-opacity-25 text-secondary">${formatFileSize(this.fileSize)}</span>
                        </div>

                        <!-- –û–±–ª–∞—Å—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ -->
                        <div class="preview-area d-none mt-2">
                            <div class="preview-container position-relative">
                                <pre class="preview-content text-muted small bg-light rounded p-3 mb-0 font-monospace"></pre>
                                <div class="preview-blur"></div>
                            </div>
                            <div class="preview-stats text-end text-muted small mt-1">0/${CONFIG.LIMITS.maxPreviewChars} —Å–∏–º–≤–æ–ª–æ–≤</div>
                        </div>

                        <!-- –û–±–ª–∞—Å—Ç—å —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è -->
                        <div class="edit-area d-none mt-2">
                            <div class="d-flex gap-2 align-items-center">
                                <input type="text" class="form-control form-control-sm" 
                                    value="${this.getFileNameWithoutExtension(this.fileName)}"
                                    placeholder="–í–≤–µ–¥–∏—Ç–µ –∏–º—è —Ñ–∞–π–ª–∞">
                                <button class="btn btn-sm save-btn" title="–°–æ—Ö—Ä–∞–Ω–∏—Ç—å">üíæ</button>
                                <button class="btn btn-sm cancel-btn" title="–°–±—Ä–æ—Å–∏—Ç—å">‚Ü∫</button>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- –î–µ–π—Å—Ç–≤–∏—è -->
                <div class="file-actions d-flex align-items-center gap-2 flex-shrink-0">
                    <button class="btn btn-outline-info btn-sm preview-btn" title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä">üëÅÔ∏è</button>
                    <button class="btn btn-outline-warning btn-sm rename-btn" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å">‚úèÔ∏è</button>
                    <button class="btn btn-outline-danger btn-sm remove-btn" title="–£–¥–∞–ª–∏—Ç—å">üóëÔ∏è</button>
                </div>
            </div>
        `;

        this.attachEventHandlers(card);
        return card;
    }

    /**
     * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
     * @param {HTMLElement} card - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @private
     */
    attachEventHandlers(card) {
        const previewBtn = card.querySelector('.preview-btn');
        const previewArea = card.querySelector('.preview-area');
        const previewContent = card.querySelector('.preview-content');
        const previewStats = card.querySelector('.preview-stats');
        const previewBlur = card.querySelector('.preview-blur');

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        previewBtn.addEventListener('click', async () => {
            if (this.isPreviewExpanded) {
                // –°–∫—Ä—ã—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                previewArea.classList.add('d-none');
                previewBtn.classList.remove('active', 'btn-info');
                previewBtn.classList.add('btn-outline-info');
                this.isPreviewExpanded = false;
            } else {
                // –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä
                previewArea.classList.remove('d-none');
                previewBtn.classList.remove('btn-outline-info');
                previewBtn.classList.add('active', 'btn-info');
                this.isPreviewExpanded = true;

                // –ó–∞–≥—Ä—É–∑–∏—Ç—å –∫–æ–Ω—Ç–µ–Ω—Ç
                if (!this.previewContent && !this.isLoadingPreview) {
                    await this.loadPreviewContent(card);
                }

                // –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                this.updatePreviewStats(previewContent.textContent.length, previewStats, previewBlur);
            }
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è
        const removeBtn = card.querySelector('.remove-btn');
        removeBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            e.preventDefault();
            console.log('Remove button clicked for file:', this.fileId);
            this.onRemove();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        const renameBtn = card.querySelector('.rename-btn');
        const saveBtn = card.querySelector('.save-btn');
        const cancelBtn = card.querySelector('.cancel-btn');
        const editInput = card.querySelector('.edit-area input');

        renameBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            console.log('Rename button clicked, current editing state:', this.isEditing);
            this.toggleEditMode(card);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
        saveBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            console.log('Save button clicked');
            this.saveFileName(card);
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ - –ü–û–õ–ù–û–°–¢–¨–Æ –ü–ï–†–ï–†–ê–ë–û–¢–ê–ù
        cancelBtn.addEventListener('click', (e) => {
            e.stopPropagation();
            console.log('Cancel button clicked');
            this.cancelEdit(card, true); // true - –ø–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        });

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –ø–æ Enter
        editInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter') {
                e.preventDefault();
                this.saveFileName(card);
            }
            e.stopPropagation();
        });

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –≤–Ω–µ –æ–±–ª–∞—Å—Ç–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.setupClickOutsideHandler(card);
    }

    /** 
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
     * @param {HTMLElement} card - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @param {boolean} forceOpen - 
     * @private
    */
    toggleEditMode(card) {
        const editArea = card.querySelector('.edit-area');
        const renameBtn = card.querySelector('.rename-btn');
        const editInput = card.querySelector('.edit-area input');

        if (this.isEditing) {
            this.cancelEdit(card, false);
        } else {
            // –û—Ç–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            this.isEditing = true;
            this.originalFileName = this.fileName; // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏

            editArea.classList.remove('d-none');
            renameBtn.classList.add('active');
            editInput.value = this.getFileNameWithoutExtension(this.fileName);
            editInput.focus();
            editInput.select();

            console.log('Edit mode opened');
        }
    }

    /** 
     * –°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     * @param {HTMLElement} card - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @private
    */
    saveFileName(card) {
        const editInput = card.querySelector('.edit-area input');
        let newName = editInput.value.trim();

        if (!newName) {
            showNotification('–ò–º—è —Ñ–∞–π–ª–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'warning');
            return;
        }

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        const extension = this.getFileExtension(this.originalFileName);
        if (extension && !newName.endsWith(extension)) {
            newName += extension;
        }

        // –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
        const oldName = this.fileName;
        this.fileName = newName;
        this.onRename(newName);

        // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
        const fileNameElement = card.querySelector('.file-name');
        fileNameElement.textContent = this.truncateFilename(newName, this.computeMaxChars());
        fileNameElement.title = newName;

        // –ó–∞–∫—Ä—ã—Ç–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        this.cancelEdit(card, false);
        showNotification(`–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω: "${this.getFileNameWithoutExtension(oldName)}" ‚Üí "${this.getFileNameWithoutExtension(newName)}"`, 'success');
    }

    /** 
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–∫—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞
     * @param {HTMLElement} card - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @param {boolean} showNotification - –ü–æ–ª–∞–∑–∞—Ç—å –ª–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
     * @private
    */
    cancelEdit(card, showNotification = true) {
        const editArea = card.querySelector('.edit-area');
        const renameBtn = card.querySelector('.rename-btn');
        const editInput = card.querySelector('.edit-area input');

        this.isEditing = false;

        if (editArea) editArea.classList.add('d-none');
        if (renameBtn) renameBtn.classList.remove('active');

        // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–µ–Ω–∏–µ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∏–º–µ–Ω–∏ –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
        if (editInput) {
            const originalNameWithoutExt = this.getFileNameWithoutExtension(this.originalFileName || this.fileName);
            editInput.value = originalNameWithoutExt;
        }

        // –ü–æ–∫–∞–∑–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        if (showNotification) {
            showNotification('–ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã, –∏–º—è —Ñ–∞–π–ª–∞ –Ω–µ –∏–∑–º–µ–Ω–µ–Ω–æ', 'info');
        }

        console.log('Edit mode closed');
    }

    /** 
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–º–µ–Ω—É —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞–∑–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞ –ø–æ –∫–ª–∏–∫—É –Ω–∞ –ª—é–±–æ–µ –º–µ—Å—Ç–æ —Å–Ω–∞—Ä—É–∂–∏
     * @param {HTMLElement} card - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @private
    */
    setupClickOutsideHandler(card) {
        const handleClickOutside = (e) => {
            if (this.isEditing && !card.contains(e.target)) {
                console.log('Click outside detected, closing edit mode');
                this.cancelEdit(card, true);
            }
        };

        // –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        document.addEventListener('click', handleClickOutside);

        // –°—Å—ã–ª–∫–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞
        this.clickOutsideHandler = handleClickOutside;
    }

    /** 
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞ (–±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è)
     * @param {string} filename - –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     * @private
    */
    getFileNameWithoutExtension(filename) {
        const lastDotIndex = filename.lastIndexOf('.');
        return lastDotIndex === -1 ? filename : filename.substring(0, lastDotIndex);
    }

    /** 
     * –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞
     * @param {string} filename - –ü–æ–ª–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     * @private
    */
    getFileExtension(filename) {
        const lastDotIndex = filename.lastIndexOf('.');
        return lastDotIndex === -1 ? '' : filename.substring(lastDotIndex);
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     * @param {HTMLElement} card - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @private
     */
    async loadPreviewContent(card) {
        const previewContent = card.querySelector('.preview-content');
        const previewStats = card.querySelector('.preview-stats');
        const previewBlur = card.querySelector('.preview-blur');

        this.isLoadingPreview = true;
        previewContent.textContent = '–ó–∞–≥—Ä—É–∑–∫–∞ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ...';

        try {
            const content = await getFileContent(this.fileId);
            this.previewContent = content;

            if (content.length > CONFIG.LIMITS.maxPreviewChars) {
                previewContent.textContent = content.substring(0, CONFIG.LIMITS.maxPreviewChars);
                previewBlur.style.display = 'block';
            } else {
                previewContent.textContent = content || '–§–∞–π–ª –ø—É—Å—Ç';
                previewBlur.style.display = 'none';
            }

            this.updatePreviewStats(content.length, previewStats, previewBlur);
        } catch (error) {
            console.error('Error loading file content:', error);
            previewContent.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞';
            previewStats.textContent = '–û—à–∏–±–∫–∞';
            previewBlur.style.display = 'none';
        } finally {
            this.isLoadingPreview = false;
        }
    }

    /**
     * –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     * @param {number} length - –î–ª–∏–Ω–∞ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
     * @param {HTMLElement} statsElement - –≠–ª–µ–º–µ–Ω—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param {HTMLElement} blurElement - –≠–ª–µ–º–µ–Ω—Ç —Ä–∞–∑–º—ã—Ç–∏—è
     * @private
     */
    updatePreviewStats(length, statsElement, blurElement) {
        statsElement.textContent = `${length}/${CONFIG.LIMITS.maxPreviewChars} —Å–∏–º–≤–æ–ª–æ–≤`;

        if (length > CONFIG.LIMITS.maxPreviewChars) {
            statsElement.classList.add('text-warning');
            blurElement.style.display = 'block';
        } else {
            statsElement.classList.remove('text-warning');
            blurElement.style.display = 'none';
        }
    }

    /**
     * –ü–æ–¥–±–∏—Ä–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –¥–ª–∏–Ω—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏
     * @returns {number} –¥–ª–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
     * @private
     */
    computeMaxChars() {
        const w = window.innerWidth;
        if (w >= 1280) return 30;
        if (w >= 1024) return 26;
        if (w >= 768) return 20;
        return 12;
    }

    /**
     * –û–±—Ä–µ–∑–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
     * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     * @param {number} maxChars - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤
     * @returns {string} —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
     * @private 
     */
    truncateFilename(name, maxChars) {
        const dot = name.lastIndexOf('.');
        const ext = dot === -1 ? '' : name.substring(dot);
        const base = dot === -1 ? name : name.substring(0, dot);

        if (base.length + ext.length <= maxChars) {
            return base + ext;
        }

        if (maxChars <= ext.length + 5) {
            return `${base[0]}....${ext}`;
        }

        const keep = Math.max(1, Math.floor((maxChars - ext.length - 5) / 2));
        const left = base.substring(0, keep + 1);
        const right = base.substring(base.length - keep);

        return `${left}....${right}${ext}`;
    }

    // –í –¥–µ—Å—Ç—Ä—É–∫—Ç–æ—Ä–µ –∏–ª–∏ –º–µ—Ç–æ–¥–µ —É–¥–∞–ª–µ–Ω–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
    destroy() {
        if (this.clickOutsideHandler) {
            document.removeEventListener('click', this.clickOutsideHandler);
        }
    }
}

export default FileCard;
