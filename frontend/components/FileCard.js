/**
 * –ö–æ–º–ø–æ–Ω–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–∞
 * @class FileCard
 */

import { CONFIG, getFileIcon, formatFileSize } from '../config.js';
import { getFileContent } from '../utils/api.js';
import Notification from './Notification.js';

class FileCard {
    /**
     * –°–æ–∑–¥–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –∫–∞—Ä—Ç–æ—á–∫–∏ —Ñ–∞–π–ª–∞
     * @param {Object} config - –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∫–∞—Ä—Ç–æ—á–∫–∏
     * @param {string} config.fileId - –£–Ω–∏–∫–∞–ª—å–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä —Ñ–∞–π–ª–∞
     * @param {string} config.fileName - –û—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
     * @param {string} config.fileSize - –†–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
     * @param {string} config.originalName - –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
     * @param {Function} config.onRename - –ö–æ–ª–±—ç–∫ –¥–ª—è –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω–∏—è
     * @param {Function} config.onRemove - –ö–æ–ª–±—ç–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
     * @param {Function} config.onPreview - –ö–æ–ª–±—ç–∫ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     */
    constructor({ fileId, fileName, originalName, fileSize, onRename, onRemove, onPreview }) {
        this.fileId = fileId;
        this.fileName = fileName;
        this.originalName = originalName;
        this.fileSize = fileSize;
        this.onRename = onRename;
        this.onRemove = onRemove;
        this.onPreview = onPreview;
        this.isEditing = false;
        this.isPreviewExpanded = false;
        this.previewContent = '';
    }

    /**
     * –ü–æ–¥–±–∏—Ä–∞–µ—Ç –∞–¥–∞–ø—Ç–∏–≤–Ω—É—é –¥–ª–∏–Ω—É –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —à–∏—Ä–∏–Ω—ã —ç–∫—Ä–∞–Ω–∞
     * @returns {int} –¥–ª–∏–Ω–∞ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–≥–æ –∏–º–µ–Ω–∏ —Ñ–∞–π–ª–∞
     * @private
     */
    computeMaxChars() {
        const w = window.innerWidth;
        if (w >= 1280) return 30;
        if (w >= 1024) return 26;
        if (w >= 768) return 20;
        return 12;
    }

    /**
     * –û–±—Ä–µ–∑–∞–µ—Ç –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞ —Ç–∞–∫, —á—Ç–æ–±—ã –≤—Å–µ–≥–¥–∞ –æ—Å—Ç–∞–≤–∞–ª–∞—Å—å –ø–µ—Ä–≤–∞—è –±—É–∫–≤–∞ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ
     * @param {string} name - –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
     * @param {number} maxChars - –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–∏–º–≤–æ–ª–æ–≤ (–≤–∫–ª—é—á–∞—è —Ç–æ—á–∫–∏ –∏ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ)
     * @returns {string} —Å–æ–∫—Ä–∞—â—ë–Ω–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–∞–µ–º–æ–µ –∏–º—è
     * @private 
     */
    truncateFilename(name, maxChars) {
        const dot = name.lastIndexOf('.');
        const ext = dot === -1 ? '' : name.substring(dot);
        const base = dot === -1 ? name : name.substring(0, dot);

        if (base.length + ext.length <= maxChars) {
            return base + ext;
        }

        if (maxChars <= ext.length + 5) {
            return `${base[0]}....${ext}`;
        }

        const keep = Math.max(1, Math.floor((maxChars - ext.length - 5) / 2));
        const left = base.substring(0, keep + 1);
        const right = base.substring(base.length - keep);

        return `${left}....${right}${ext}`;
    }

    /**
     * –†–µ–Ω–¥–µ—Ä–∏—Ç –∫–∞—Ä—Ç–æ—á–∫—É —Ñ–∞–π–ª–∞
     * @returns {HTMLElement} DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     */
    render() {
        const card = document.createElement('div');
        card.className = 'file-card smooth-transition cursor-move';
        card.dataset.fileId = this.fileId;

        const displayName = this.truncateFilename(this.fileName, this.computeMaxChars());
        const displayOriginal = this.truncateFilename(this.originalName, 12);
        const icon = getFileIcon(this.fileName);

        card.innerHTML = `
            <div class="flex items-start w-full gap-4">
                <!-- –ò–∫–æ–Ω–∫–∞ -->
                <div class="flex-shrink-0">
                    <div class="text-3xl w-12 h-12 flex items-center justify-center">${icon}</div>
                </div>

                <!-- –ò–Ω—Ñ–æ -->
                <div class="flex-1 min-w-0">
                    <div class="file-name text-lg font-semibold text-gray-900" title="${this.fileName}">${displayName}</div>
                    <div class="file-info flex items-center space-x-3 text-xs text-gray-600 mt-2">
                        <span class="bg-primary bg-opacity-20 px-2 py-1 rounded-full"
                            title="${this.originalName}">${displayOriginal}</span>
                        <span class="bg-secondary bg-opacity-20 px-2 py-1 rounded-full">${formatFileSize(this.fileSize)}</span>
                    </div>

                    <!-- –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä -->
                    <div class="preview-area hidden mt-3 smooth-transition">
                        <div
                            class="preview-content text-sm text-gray-600 bg-gray-50 rounded-lg p-3 max-h-48 overflow-y-auto font-mono whitespace-pre">
                        </div>
                    </div>

                    <!-- –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ -->
                    <div class="edit-area hidden mt-3 smooth-transition">
                        <div class="flex gap-2 items-center">
                            <input type="text"
                                class="edit-input flex-1 px-3 py-2 border-2 rounded-lg focus:outline-none focus:ring-2 focus:ring-primary hover:ring-2 hover:ring-primary"
                                value="${this.fileName}">
                            <button
                                class="save-edit-btn px-3 py-2 bg-green-500 text-white rounded-lg hover:bg-green-600">üíæ</button>
                            <button class="cancel-edit-btn px-3 py-2 bg-red-500 text-white rounded-lg hover:bg-red-600">‚Ü∫</button>
                        </div>
                    </div>
                </div>

                <!-- –î–µ–π—Å—Ç–≤–∏—è -->
                <div class="file-actions flex-shrink-0 flex flex-col items-end gap-2">
                    <div class="flex space-x-2">
                        <button class="preview-btn action-btn" title="–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä"><span class="text-lg">üëÅÔ∏è</span></button>
                        <button class="rename-btn action-btn" title="–ü–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞—Ç—å"><span class="text-lg">‚úèÔ∏è</span></button>
                        <button class="remove-btn action-btn" title="–£–¥–∞–ª–∏—Ç—å"><span class="text-lg">üóëÔ∏è</span></button>
                    </div>
                </div>
            </div>
        `;

        // –ü—Ä–∏–≤—è–∑–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π
        this.attachEventHandlers(card);
        return card;
    }


    /**
     * –ù–∞–∑–Ω–∞—á–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –¥–ª—è –∫–∞—Ä—Ç–æ—á–∫–∏
     * @param {HTMLElement} card - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @private
     */
    attachEventHandlers(card) {
        const previewBtn = card.querySelector('.preview-btn');
        const previewArea = card.querySelector('.preview-area');
        const contentElement = card.querySelector('.preview-content');

        previewBtn.addEventListener('click', async () => {
            if (previewArea.classList.contains('hidden')) {
                previewArea.classList.remove('hidden');
                previewBtn.classList.add('ring-2', 'ring-primary');
                if (!this.previewContent) {
                    await this.loadPreviewContent(contentElement);
                }
            } else {
                previewArea.classList.add('hidden');
                previewBtn.classList.remove('ring-2', 'ring-primary');
            }
        });

        // –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        const renameBtn = card.querySelector('.rename-btn');
        const editArea = card.querySelector('.edit-area');
        const input = card.querySelector('.edit-input');
        const saveBtn = card.querySelector('.save-edit-btn');
        const cancelBtn = card.querySelector('.cancel-edit-btn');

        renameBtn.addEventListener('click', () => {
            editArea.classList.remove('hidden');
            input.focus();
            input.select();
        });

        saveBtn.addEventListener('click', () => {
            const newVal = input.value.trim();
            if (!newVal) return Notification.show('–ò–º—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º', 'warning');

            this.fileName = newVal;
            card.querySelector('.file-name').textContent =
                this.truncateFilename(this.fileName, this.computeMaxChars());
            editArea.classList.add('hidden');
            this.onRename(this.fileName);

            Notification.show('–§–∞–π–ª –ø–µ—Ä–µ–∏–º–µ–Ω–æ–≤–∞–Ω', 'success');
        });

        cancelBtn.addEventListener('click', () => {
            input.value = this.originalName;
            this.fileName = this.originalName;

            card.querySelector('.file-name').textContent =
                this.truncateFilename(this.fileName, this.computeMaxChars());
            editArea.classList.add('hidden');
            this.onRename(this.fileName);

            Notification.show('–ò–º—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ', 'info');
        });

        // –£–¥–∞–ª–µ–Ω–∏–µ
        card.querySelector('.remove-btn').addEventListener('click', () => this.onRemove());
    }

    togglePreview(card) {
        const previewArea = card.querySelector('.preview-area');
        const isHidden = previewArea.classList.contains('hidden');

        if (isHidden) {
            previewArea.classList.remove('hidden');
            this.isPreviewExpanded = true;
            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –∑–∞–≥—Ä—É–∂–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –æ—Ç–∫—Ä—ã—Ç–∏–∏
            if (!this.previewContent) {
                this.loadPreviewContent(card);
            }
        } else {
            previewArea.classList.add('hidden');
            this.isPreviewExpanded = false;
        }
    }

    /**
     * –ó–∞–≥—Ä—É–∂–∞–µ—Ç —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –¥–ª—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
     * @param {HTMLElement} card - DOM-—ç–ª–µ–º–µ–Ω—Ç –∫–∞—Ä—Ç–æ—á–∫–∏
     * @private
     */
    async loadPreviewContent(contentElement) {
        try {
            const content = await getFileContent(this.fileId);
            const preview = content.length > CONFIG.LIMITS.maxPreviewChars
                ? content.substring(0, CONFIG.LIMITS.maxPreviewChars) + '\n\n... [—Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ–±—Ä–µ–∑–∞–Ω–æ]'
                : content;
            contentElement.textContent = preview || '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ –ø—É—Å—Ç–æ–µ';
            this.previewContent = preview;
        } catch {
            contentElement.textContent = '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ —Ñ–∞–π–ª–∞';
        }
    }
}

export default FileCard;
